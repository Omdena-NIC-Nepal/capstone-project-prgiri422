# gbc_vulnerability.py
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
import os

# Setup directories
os.makedirs("models", exist_ok=True)
os.makedirs("plots", exist_ok=True)
os.makedirs("reports", exist_ok=True)

# Load the data
features = [
    'Temp_2m', 'Precip', 'Humidity_2m', 'EarthSkinTemp',
    'heat_stress_index', 'drought_index', 'wetbulb_diff',
    'avg_windspeed', 'max_avg_windspeed', 'temp_precip_interaction',
    'Temp_2m_lag1', 'Precip_lag1', 'Temp_2m_roll7', 'Precip_roll7', 'Humidity_2m_roll7'
]

try:
    df = pd.read_csv("data/processed/feature_engineered_climate_data.csv")
    required_cols = features + ['Vulnerability_Encoded']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"Missing required columns: {missing_cols}")
except Exception as e:
    print(f"Error loading data: {str(e)}")
    exit()

# Feature selection
features = [f for f in features if f in df.columns]
X = df[features]
y = df['Vulnerability_Encoded']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Build Gradient Boosting Classifier pipeline
gbc_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler()),
    ('model', GradientBoostingClassifier(n_estimators=100, random_state=42))
])

# Train the model
gbc_pipeline.fit(X_train, y_train)

# Save the model
joblib.dump(gbc_pipeline, 'models/gbc_vulnerability.pkl')

# Evaluate the model
y_pred = gbc_pipeline.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

# Save classification report and confusion matrix
report = classification_report(y_test, y_pred, output_dict=True)
pd.DataFrame(report).to_csv("reports/gbc_vulnerability_report.csv")

plt.figure(figsize=(8, 6))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Gradient Boosting - Vulnerability Confusion Matrix')
plt.savefig('plots/gbc_vulnerability_cm.png')
plt.close()
